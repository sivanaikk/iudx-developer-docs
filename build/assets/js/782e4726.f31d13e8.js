"use strict";(self.webpackChunkiudx_website=self.webpackChunkiudx_website||[]).push([[8783],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return u}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),c=s(n),k=r,u=c["".concat(p,".").concat(k)]||c[k]||d[k]||i;return n?a.createElement(u,l(l({ref:t},m),{},{components:n})):a.createElement(u,l({ref:t},m))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=k;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[c]="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},5642:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return p},default:function(){return d},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return m}});var a=n(87462),r=n(63366),i=(n(67294),n(3905)),l=["components"],o={sidebar_position:9},p=void 0,s={unversionedId:"Deployment/Docker Swarm-Based Deployment/IUDX Component Installation/Latest-Ingestion-Pipeline",id:"version-5.0.0/Deployment/Docker Swarm-Based Deployment/IUDX Component Installation/Latest-Ingestion-Pipeline",isDocsHomePage:!1,title:"Latest-Ingestion-Pipeline",description:"Will be deploying using swarm stack yaml files.",source:"@site/versioned_docs/version-5.0.0/Deployment/Docker Swarm-Based Deployment/IUDX Component Installation/Latest-Ingestion-Pipeline.md",sourceDirName:"Deployment/Docker Swarm-Based Deployment/IUDX Component Installation",slug:"/Deployment/Docker Swarm-Based Deployment/IUDX Component Installation/Latest-Ingestion-Pipeline",permalink:"/docs/Deployment/Docker Swarm-Based Deployment/IUDX Component Installation/Latest-Ingestion-Pipeline",editUrl:"https://github.com/datakaveri/iudx-developer-docs/blob/main/versioned_docs/version-5.0.0/Deployment/Docker Swarm-Based Deployment/IUDX Component Installation/Latest-Ingestion-Pipeline.md",tags:[],version:"5.0.0",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"version-5.0.0/tutorialSidebar",previous:{title:"API Server",permalink:"/docs/Deployment/Docker Swarm-Based Deployment/IUDX Component Installation/API Server"},next:{title:"Auditing Server",permalink:"/docs/Deployment/Docker Swarm-Based Deployment/IUDX Component Installation/Auditing Server"}},m=[{value:"Installation",id:"installation",children:[],level:3},{value:"Tests",id:"tests",children:[],level:3},{value:"Notes",id:"notes",children:[],level:3}],c={toc:m};function d(e){var t=e.components,n=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Will be deploying using swarm stack yaml files."),(0,i.kt)("h3",{id:"installation"},"Installation"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Navigate to the below directory: "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"cd iudx-deployment/Docker-Swarm-deployment/single-node/lip/\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Assign the node label if not assigned during swarm installation using:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"docker node update --label-add lip-node=true <node_name>\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Make a copy of the sample secrets directory by running the following command:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"cp -r example-secrets/secrets .\n")),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Provide a correct config file for bringing up the LIP server. Substitute appropriate values using commands mentioned in config files.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Configure the ",(0,i.kt)("inlineCode",{parentName:"p"},"secrets/.lip.env")," file with appropriate values in the placeholders ",(0,i.kt)("inlineCode",{parentName:"p"},"<...>"),".")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Define appropriate values of resources "),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"CPU requests and limits"),(0,i.kt)("li",{parentName:"ul"},"RAM requests and limits"),(0,i.kt)("li",{parentName:"ul"},"PID limit\nin ",(0,i.kt)("inlineCode",{parentName:"li"},"lip-stack.resources.yml")," as shown in the sample file ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("a",{parentName:"strong",href:"https://github.com/datakaveri/iudx-deployment/blob/4.5.0/Docker-Swarm-deployment/single-node/lip/example-lip-stack.resources.yaml"},"example-lip-stack.resources.yml")),"."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"To install the latest ingestion pipeline stack, use the following commands:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"cp example-lip-stack.resources.yaml lip-stack.resources.yaml\n\ndocker stack deploy -c lip-stack.yaml -c lip-stack.resources.yaml lip\n")))),(0,i.kt)("h3",{id:"tests"},"Tests"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"RMQ-LIP Pipeline Test"),(0,i.kt)("p",{parentName:"li"},"a. Test the publishing of messages to exchange and routing to queue through a Python script"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Create Python Virtual Environment"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"# Create venv\npython3 -m venv /home/iudx/.venv/iudx-tests\n\n# Activate venv\nsource /home/iudx/.venv/iudx-tests/bin/activate\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Install All Necessary Packages from ",(0,i.kt)("inlineCode",{parentName:"p"},"requirements.txt")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"pip install -r requirements.txt\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Configure Test Exchanges as Follows"),(0,i.kt)("table",{parentName:"li"},(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"VHOST"),(0,i.kt)("th",{parentName:"tr",align:null},"Exchange Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Type of Exchange"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"IUDX"),(0,i.kt)("td",{parentName:"tr",align:null},"test-itms"),(0,i.kt)("td",{parentName:"tr",align:null},"topic"))))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Configure Exchange-Queue Binding as Follows"),(0,i.kt)("table",{parentName:"li"},(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"VHOST"),(0,i.kt)("th",{parentName:"tr",align:null},"Exchange"),(0,i.kt)("th",{parentName:"tr",align:null},"Queue"),(0,i.kt)("th",{parentName:"tr",align:null},"Routing"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"IUDX"),(0,i.kt)("td",{parentName:"tr",align:null},"test-itms"),(0,i.kt)("td",{parentName:"tr",align:null},"database"),(0,i.kt)("td",{parentName:"tr",align:null},"key")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"IUDX"),(0,i.kt)("td",{parentName:"tr",align:null},"test-itms"),(0,i.kt)("td",{parentName:"tr",align:null},"redis-latest"),(0,i.kt)("td",{parentName:"tr",align:null},"key"))))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Configure Parameters in the Python Script:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"  # admin username\n  username = ''\n  # admin password\n  password = ''\n  # Public domain RMQ domain name\n  host = ''\n  # Public AMQPS port\n  port = \n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Run the Python Scripts")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Refer ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"https://github.com/datakaveri/iudx-deployment/tree/4.5.0/K8s-deployment/Charts/databroker/tests"},"here")),"    for more information."))),(0,i.kt)("p",{parentName:"li"},"b. Test if the Messages have Reached the Redis"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Exec into the container"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"docker exec -it <redis-container> bash\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Login to Redis as follows"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"redis-cli -a `cat $REDIS_PASSWORD_FILE`\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"See if that packet has come to Redis"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"# get packets \njson.get test_itms\n")))),(0,i.kt)("p",{parentName:"li"},"c. Check the logs of the LIP container; there should not be any error log. If there is, please take necessary actions as specified/indicated by the log."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"docker logs -f <lip-container-id>\n")))),(0,i.kt)("h3",{id:"notes"},"Notes"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"To check if the lip-server are deployed and running: ",(0,i.kt)("inlineCode",{parentName:"li"},"docker stack ps lip")),(0,i.kt)("li",{parentName:"ol"},"For more information on installation instructions, refer ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("a",{parentName:"strong",href:"https://github.com/datakaveri/iudx-deployment/tree/master/Docker-Swarm-deployment/single-node/lip"},"here"),".")),(0,i.kt)("li",{parentName:"ol"},"For more information about the auth-server, refer ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("a",{parentName:"strong",href:"https://github.com/datakaveri/latest-ingestion-pipeline#latest-ingestion-pipeline"},"here"),"."))))}d.isMDXComponent=!0}}]);
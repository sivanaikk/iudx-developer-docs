"use strict";(self.webpackChunkiudx_website=self.webpackChunkiudx_website||[]).push([[601],{3905:function(e,t,a){a.d(t,{Zo:function(){return m},kt:function(){return k}});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var p=r.createContext({}),i=function(e){var t=r.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},m=function(e){var t=i(e.components);return r.createElement(p.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,p=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),d=i(a),u=n,k=d["".concat(p,".").concat(u)]||d[u]||c[u]||o;return a?r.createElement(k,s(s({ref:t},m),{},{components:a})):r.createElement(k,s({ref:t},m))}));function k(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,s=new Array(o);s[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[d]="string"==typeof e?e:n,s[1]=l;for(var i=2;i<o;i++)s[i]=a[i];return r.createElement.apply(null,s)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},80853:function(e,t,a){a.r(t),a.d(t,{contentTitle:function(){return p},default:function(){return c},frontMatter:function(){return l},metadata:function(){return i},toc:function(){return m}});var r=a(87462),n=a(63366),o=(a(67294),a(3905)),s=["components"],l={sidebar_position:4},p=void 0,i={unversionedId:"Deployment/Docker Swarm-Based Deployment/IUDX Component Installation/PostgreSQL",id:"version-5.0.0/Deployment/Docker Swarm-Based Deployment/IUDX Component Installation/PostgreSQL",isDocsHomePage:!1,title:"PostgreSQL",description:"- PostgreSQL is being used as a credentials and policy data store.",source:"@site/versioned_docs/version-5.0.0/Deployment/Docker Swarm-Based Deployment/IUDX Component Installation/PostgreSQL.md",sourceDirName:"Deployment/Docker Swarm-Based Deployment/IUDX Component Installation",slug:"/Deployment/Docker Swarm-Based Deployment/IUDX Component Installation/PostgreSQL",permalink:"/docs/Deployment/Docker Swarm-Based Deployment/IUDX Component Installation/PostgreSQL",editUrl:"https://github.com/datakaveri/iudx-developer-docs/blob/main/versioned_docs/version-5.0.0/Deployment/Docker Swarm-Based Deployment/IUDX Component Installation/PostgreSQL.md",tags:[],version:"5.0.0",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"version-5.0.0/tutorialSidebar",previous:{title:"RabbitMQ",permalink:"/docs/Deployment/Docker Swarm-Based Deployment/IUDX Component Installation/RabbitMQ"},next:{title:"Redis",permalink:"/docs/Deployment/Docker Swarm-Based Deployment/IUDX Component Installation/Redis"}},m=[{value:"Installation",id:"installation",children:[],level:3},{value:"Notes",id:"notes",children:[],level:3}],d={toc:m};function c(e){var t=e.components,l=(0,n.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},d,l,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"PostgreSQL is being used as a credentials and policy data store."),(0,o.kt)("li",{parentName:"ul"},"Will be deploying using swarm stack yaml files")),(0,o.kt)("h3",{id:"installation"},"Installation"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Navigate to the directory:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"cd iudx-deployment/Docker-Swarm-deployment/single-node/postgres/\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Assign the node label if not assigned during swarm installation using:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"docker node update --label-add postgres-db-node=true <node_name>\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"To generate the passwords:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"./create-secrets.sh\n")),(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Secrets directory after generation of passwords:")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"secrets/\n\u2514\u2500\u2500 passwords\n    \u251c\u2500\u2500 postgres-auth-password\n    \u251c\u2500\u2500 postgres-keycloak-password\n    \u251c\u2500\u2500 postgresql-password\n    \u2514\u2500\u2500 postgres-rs-password\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Define appropriate values of resources "),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"CPU requests and limits"),(0,o.kt)("li",{parentName:"ul"},"RAM requests and limits) ")),(0,o.kt)("p",{parentName:"li"},"in ",(0,o.kt)("inlineCode",{parentName:"p"},"postgres-stack.resources.yml")," as shown in the sample file ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://github.com/datakaveri/iudx-deployment/blob/4.5.0/Docker-Swarm-deployment/single-node/postgres/example-postgres-stack.resources.yaml"},"example-postgres-stack.resources.yml")),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Deploy PostgreSQL stack as follows:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"cp example-postgres-stack.resources.yaml postgres-stack.resources.yaml\n\ncp example-postgres-stack.custom.yaml postgres-stack.custom.yaml\n\ndocker stack deploy -c postgres-stack.yaml -c postgres-stack.resources.yaml -c postgres-stack.custom.yaml postgres\n")))),(0,o.kt)("ol",{start:6},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"The RS and Auth schema is created using the Flyway tool. Follow the steps below:"),(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Bind/publish/expose the PostgreSQL port ",(0,o.kt)("inlineCode",{parentName:"p"},"5432")," to the host VM temporarily.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Clone the iudx-aaa-server repository and perform the following commands:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"git clone -b 4.5.0 https://github.com/datakaveri/iudx-aaa-server.git && cd iudx-aaa-server\n")),(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Update ",(0,o.kt)("inlineCode",{parentName:"p"},"flyway.conf")," with the required data as follows:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"flyway.url=jdbc:postgresql://127.0.0.1:5432/postgres\nflyway.user=postgres\nflyway.password=<value in secrets/passwords/postgresql-password>\nflyway.schemas=aaa\nflyway.placeholders.authUser=iudx_auth_user\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Run the info command to test the configuration. Then, run the migrate command to set up the database:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"# Prerequisite: [Download](https://maven.apache.org/download.cgi) and [Install](https://maven.apache.org/install.html) Maven.\nmvn flyway:info -Dflyway.configFiles=flyway.conf\nmvn flyway:migrate -Dflyway.configFiles=flyway.conf\n")))))),(0,o.kt)("p",{parentName:"li"},"Refer ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://github.com/datakaveri/iudx-aaa-server#flyway-database-setup"},"here"))," for more information.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Similarly, do the same for the resource server:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"git clone -b 4.5.0 https://github.com/datakaveri/iudx-resource-server.git && cd iudx-resource-server\n")),(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Update ",(0,o.kt)("inlineCode",{parentName:"p"},"flyway.conf")," for the resource server:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"flyway.url=jdbc:postgresql://127.0.0.1:5432/iudx_rs\nflyway.user=postgres\nflyway.password=<value in secrets/passwords/postgresql-password>\nflyway.schemas=public\nflyway.placeholders.rsUser=iudx_rs_user\nflyway.cleanDisabled=true\nflyway.baselineOnMigrate=false\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Run the info command and then the migrate command to set up the database:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"mvn flyway:info -Dflyway.configFiles=flyway.conf\nmvn flyway:migrate -Dflyway.configFiles=flyway.conf\n")))))),(0,o.kt)("ol",{start:8},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Login to PostgreSQL:"),(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Exec into the container:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"docker exec -it <postgres-container> bash\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Login to PostgreSQL:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"PGPASSWORD=`cat secrets/passwords/postgresql-password` psql -U postgres -h localhost\n"))))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Test if required dbs (iudx_rs, iudx_keycloak, postgres) and users (postgres, iudx_keycloak_user, iudx_rs_user, iudx_auth_user) exists"),(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"List the number of databases:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"# to list the number of dbs\n\\l\n")))),(0,o.kt)("div",{style:{textAlign:"center"}},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("img",{alt:"Architecture",src:a(94327).Z}),(0,o.kt)("br",null))),(0,o.kt)("ol",{parentName:"li",start:2},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"List the number of users:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"# to list the number of users\n\\du\n")))),(0,o.kt)("div",{style:{textAlign:"center"}},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("img",{alt:"Architecture",src:a(44410).Z}),(0,o.kt)("br",null)))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Redploy stack without exposing ",(0,o.kt)("inlineCode",{parentName:"p"},"5432")," port:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"docker stack rm postgres\n\ndocker stack deploy -c postgres-stack.yaml -c postgres-stack.resources.yaml postgres\n")))),(0,o.kt)("h3",{id:"notes"},"Notes"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"To check if the PostgreSQL stacks are deployed and running, use the following command:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"docker stack ps postgres\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Following users using the passwords present at secrets/passwords/ directory and dbs are created accordingly"))),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Username"),(0,o.kt)("th",{parentName:"tr",align:null},"Password"),(0,o.kt)("th",{parentName:"tr",align:null},"Role/Access"),(0,o.kt)("th",{parentName:"tr",align:null},"Services"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"iudx_rs_user"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"secrets/passwords/postgres-rs-password")),(0,o.kt)("td",{parentName:"tr",align:null},"SELECT, INSERT, DELETE, UPDATE on tables of iudx_rs Database"),(0,o.kt)("td",{parentName:"tr",align:null},"Used by resource server")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"iudx_keycloak_user"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"secrets/passwords/postgres-keycloak-password")),(0,o.kt)("td",{parentName:"tr",align:null},"Owner of iudx_keycloak database"),(0,o.kt)("td",{parentName:"tr",align:null},"Used by Keycloak server")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"iudx_auth_user"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"secrets/passwords/postgres-auth-password")),(0,o.kt)("td",{parentName:"tr",align:null},"Access given while setting up auth server"),(0,o.kt)("td",{parentName:"tr",align:null},"Used by auth server")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"postgres"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"secrets/passwords/postgresql-password")),(0,o.kt)("td",{parentName:"tr",align:null},"Superuser"),(0,o.kt)("td",{parentName:"tr",align:null},"Used to set users and RBAC")))),(0,o.kt)("p",null,"For more information on installation instructions, refer ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://github.com/datakaveri/iudx-deployment/tree/4.5.0/Docker-Swarm-deployment/single-node/postgres#introduction"},"here")),"."))}c.isMDXComponent=!0},94327:function(e,t,a){t.Z=a.p+"assets/images/ls-7c32dbf8e0516735f3ad114027d79b0f.png"},44410:function(e,t,a){t.Z=a.p+"assets/images/user_ls-b230159fc37ac564f6beb98109492bc8.png"}}]);
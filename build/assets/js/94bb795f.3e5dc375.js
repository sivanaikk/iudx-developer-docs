"use strict";(self.webpackChunkiudx_website=self.webpackChunkiudx_website||[]).push([[5281],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return k}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=s(n),d=a,k=m["".concat(p,".").concat(d)]||m[d]||c[d]||o;return n?r.createElement(k,l(l({ref:t},u),{},{components:n})):r.createElement(k,l({ref:t},u))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[m]="string"==typeof e?e:a,l[1]=i;for(var s=2;s<o;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},63859:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return p},default:function(){return c},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return u}});var r=n(87462),a=n(63366),o=(n(67294),n(3905)),l=["components"],i={sidebar_position:1},p=void 0,s={unversionedId:"Deployment/Docker Swarm-Based Deployment/Infrastructure Provisioning/Resource planning",id:"Deployment/Docker Swarm-Based Deployment/Infrastructure Provisioning/Resource planning",isDocsHomePage:!1,title:"Resource planning",description:"The resource planning of various IUDX components and the corresponding VM\xa0is present  here. The planned resources along with instance type values need to be added in \\*.resources.yaml",source:"@site/docs/Deployment/Docker Swarm-Based Deployment/Infrastructure Provisioning/Resource planning.md",sourceDirName:"Deployment/Docker Swarm-Based Deployment/Infrastructure Provisioning",slug:"/Deployment/Docker Swarm-Based Deployment/Infrastructure Provisioning/Resource planning",permalink:"/docs/next/Deployment/Docker Swarm-Based Deployment/Infrastructure Provisioning/Resource planning",editUrl:"https://github.com/datakaveri/iudx-developer-docs/blob/main/docs/Deployment/Docker Swarm-Based Deployment/Infrastructure Provisioning/Resource planning.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Deployment Overview",permalink:"/docs/next/Deployment/Docker Swarm-Based Deployment/Deployment Overview"},next:{title:"Provisioning Docker Swarm with overlay network",permalink:"/docs/next/Deployment/Docker Swarm-Based Deployment/Infrastructure Provisioning/Provisioning Docker Swarm with overlay network"}},u=[],m={toc:u};function c(e){var t=e.components,n=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The resource planning of various IUDX components and the corresponding VM\xa0is present ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://docs.google.com/spreadsheets/d/1OQLVxeaQVu0W4GDeY7BMDj2kSCBcTh0oNgFFagbEKdQ/edit#gid=0"}," here")),". The planned resources along with instance type values need to be added in ",(0,o.kt)("strong",{parentName:"p"},"*",".resources.yaml"),"\xa0",(0,o.kt)("a",{id:"the-resource-planning-for-various-iudx-components-and-the-corresponding-vm-is-present-here--the-planned-resource-along-with-instance-type-values-need-to-be-added-in-resourcesyaml"})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Create VMs for Docker swarm cluster:")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Create VMs in cloud as per resource planning.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Create a Firewall group with following firewall rules"),(0,o.kt)("details",null,(0,o.kt)("summary",null,(0,o.kt)("mark",null,"Inbound rules")),(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Open port 22 for ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://en.wikipedia.org/wiki/Secure_Shell"},"SSH"))," (add all IPs of nodes from which you want to allow SSH)",(0,o.kt)("br",null))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"For Docker swarm (only internal private network subnet where the cluster exists)",(0,o.kt)("br",null)),(0,o.kt)("p",{parentName:"li"},"  ","\xa0","\xa0","\xa0","\xa0","a. TCP port 2377 for cluster management communications",(0,o.kt)("br",null)),(0,o.kt)("p",{parentName:"li"},"  ","\xa0","\xa0","\xa0","\xa0","b. TCP and UDP port 7946 for communication among nodes",(0,o.kt)("br",null)),(0,o.kt)("p",{parentName:"li"},"  ","\xa0","\xa0","\xa0","\xa0","c. UDP port 4789 for overlay network traffic",(0,o.kt)("br",null))))),(0,o.kt)("details",null,(0,o.kt)("summary",null,(0,o.kt)("mark",null,"Outbound rule"),"  ",(0,o.kt)("br",null)),(0,o.kt)("p",{parentName:"li"},"Allow ALL (To download packages and docker images)"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Add following firewall inbound rule in addition to rules mentioned above:"),(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"The machine where nginx will be deployed, open\xa0 TCP port 443")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"In the machine where RMQ will be deployed, open TCP ports 28041 and 24567")))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Create 2 public IPs (or just 1 public IP, if both nginx and rmq is to be deployed on a single machine). One for VM containing nginx(IP1) and for VM containing rmq (IP2) then attach those IPs to respective VMs.\xa0")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Create following DNS A records in your domain registrar\xa0 pointing to above created public IPs (IP1 and IP2)\xa0 attached to VMs"))),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Domain ( Example placeholder)"),(0,o.kt)("th",{parentName:"tr",align:null},"IP\xa0"),(0,o.kt)("th",{parentName:"tr",align:null},"Comments"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"databroker.io.test"),(0,o.kt)("td",{parentName:"tr",align:null},"IP1"),(0,o.kt)("td",{parentName:"tr",align:null},"To access databroker (RMQ) UI")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"logmanager.io.test"),(0,o.kt)("td",{parentName:"tr",align:null},"IP1\xa0"),(0,o.kt)("td",{parentName:"tr",align:null},"To access grafana UI")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"keycloak.io.test"),(0,o.kt)("td",{parentName:"tr",align:null},"IP1\xa0"),(0,o.kt)("td",{parentName:"tr",align:null},"To access keycloak Mgmt UI")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"kibana.io.test"),(0,o.kt)("td",{parentName:"tr",align:null},"IP1"),(0,o.kt)("td",{parentName:"tr",align:null},"To access kibana UI")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"cos.io.test"),(0,o.kt)("td",{parentName:"tr",align:null},"IP1"),(0,o.kt)("td",{parentName:"tr",align:null},"cat, auth server,onboarding\xa0 public api endpoint")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"acl-apd.io.test"),(0,o.kt)("td",{parentName:"tr",align:null},"IP1"),(0,o.kt)("td",{parentName:"tr",align:null},"ACL APD")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"di.io.test"),(0,o.kt)("td",{parentName:"tr",align:null},"IP1"),(0,o.kt)("td",{parentName:"tr",align:null},"Data ingestion server")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"file.io.test"),(0,o.kt)("td",{parentName:"tr",align:null},"IP1"),(0,o.kt)("td",{parentName:"tr",align:null},"File server")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"rs.io.test"),(0,o.kt)("td",{parentName:"tr",align:null},"IP1"),(0,o.kt)("td",{parentName:"tr",align:null},"Resource server")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"rs-proxy.io.test"),(0,o.kt)("td",{parentName:"tr",align:null},"IP1"),(0,o.kt)("td",{parentName:"tr",align:null},"RS proxy server")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"gis.io.test"),(0,o.kt)("td",{parentName:"tr",align:null},"IP1"),(0,o.kt)("td",{parentName:"tr",align:null},"GIS server")))))}c.isMDXComponent=!0}}]);